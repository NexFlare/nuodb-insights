grafana:
  enabled: true
  # For complete list of configuration options for  
  # grafana see the documentation @ https://github.com/helm/charts/tree/master/stable/grafana.
  # sidecar setup here is for custom dashboards and datasource for nuoca pushing metrics
  # to influx
  sidecar:
    dashboards:
      enabled: true
      label: 'grafana_dashboard'
      searchNamespace: null
      folder: "/var/lib/grafana/dashboards"
      provider:
        name:           "nuodb"
        allowUiUpdates: true
    datasources:
      enabled: true
      label: 'grafana_datasource'
      searchNamespace: null

influxdb:
  enabled: true
  # For complete list of configuration options for  
  # influxdb see the documentation @ https://github.com/influxdata/helm-charts/tree/master/charts/influxdb
  # the initScript here is to initialize a database for metrics from nuoca.
  initScripts:
    enabled: true
    scripts:
      init-nuodb.sh: |+
        /usr/bin/influx -execute 'CREATE DATABASE nuodb WITH DURATION 365d REPLICATION 1 SHARD DURATION 1d NAME nuodbrp'        
        /usr/bin/influx -execute 'CREATE DATABASE nuodb_internal WITH DURATION 365d REPLICATION 1 SHARD DURATION 1d NAME nuodbrp2'

config:
  grafana:
    # enabled: false - to not load dashboards nor datasources but do start grafana (grafana.enabled: true)
    #                - true only loads dashboards if grafana.enabled: true or grafana.overrideNamespace is set.
    enabled: true
    datasources:
      nuodb:
        database: nuodb
        timeInterval: 10s
        isDefault: true
      nuodb_ext:
        database: nuodb_internal
        timeInterval: 30s
      addons:
        database: telegraf
        timeInterval: 10s
  nuoca:
    # enabled: false - will not setup nuoca configuration  set to false when starting grafana and insights
    #                  only - in another namespace.
    enabled: true
    # these are default plugins they can be disabled individually in user values file via:
    #  plugins:
    #    metrics: ~
    #    msgtrace: ~
    #    syntrace: ~
    #    threads: ~
    # influx output plugin is generated automatically iff
    #    influxdb.enabled: true or influxdb.host: <hostname>
    # other plugins can be enabled if users value files include plugin:
    # e.g.:
    # plugins:
    #   stdout: 
    #     [[outputs.file]]
    #       files = ["stdout"]
    #       data_format = "json"
    plugins:
      metrics: |-
        [[inputs.execd]]
          command = [ "python", "/opt/nuoca/nuodb_adminquery.py", "-i", "0", "metrics" ]
          signal = "none"
          restart_delay = "10s"
          data_format = "influx"
          [inputs.execd.tags]
            db_tag = "nuodb"
      msgtrace: |-
        [[inputs.execd]]
          command = [ "python", "/opt/nuoca/nuodb_adminquery.py", "-i", "30", "msgtrace" ]
          signal = "none"
          restart_delay = "10s"
          data_format = "csv"
          csv_column_names = [ "time", "id", "startId", "host",   "pid",    "dbname", "timedelta", "totalSumStalls", "msg_trace_metric", "numStalls","totalTimeStalls","maxStallTime" ]
          csv_column_types = [ "int" , "string" , "string", "string", "string", "string", "int",   "int",           "string",  "int",      "int", "int" ]
          csv_comment = "#"
          csv_tag_columns = [ "id", "startId", "host", "dbname", "msg_trace_metric"]
          csv_timestamp_column = "time"
          csv_timestamp_format = "unix"
          fielddrop = ["time", "pid", "path"]
          name_override = "nuodb_msgtrace"
          [inputs.execd.tags]
            db_tag = "nuodb_internal"
      synctrace: |-
        [[inputs.execd]]
          command = [ "python", "/opt/nuoca/nuodb_adminquery.py", "-i", "30", "synctrace" ]
          signal = "none"
          restart_delay = "10s"
          data_format = "csv"
          csv_column_names = [ "time", "id",      "startId", "host",  "pid",    "dbname", "timedelta","totalSumStalls","sync_trace_metric",    "numLocks", "numUnlocks", "numStalls","totalTimeStalls", "maxStallTime" ]
          csv_column_types = [ "int" , "string" , "string", "string", "string", "string", "int",      "int",           "string",  "int",      "int",        "int",      "int", "int" ]
          csv_comment = "#"
          csv_tag_columns = [ "startId", "id", "host", "dbname", "sync_trace_metric"]
          csv_timestamp_column = "time"
          csv_timestamp_format = "unix"
          fielddrop = ["time", "pid"]
          name_override = "nuodb_synctrace"
          [inputs.execd.tags]
            db_tag = "nuodb_internal"
      threads: |-
        [[inputs.execd]]
          command = [ "python", "/opt/nuoca/nuodb_threads.py" ]
          signal = "none"
          restart_delay = "10s"
          data_format = "csv"
          csv_column_names = [ "host", "processid", "threadid", "state", "exe", "lcpu", "utime", "stime", "ttime", "minf", "maxf", "time" ]
          csv_column_types = [ "string", "string", "string", "string", "string", "int", "float", "float", "float", "int", "int", "int" ]
          csv_comment = "#"
          csv_tag_columns = [ "host", "processid", "threadid", "state", "exe", "lcpu"]
          csv_timestamp_column = "time"
          csv_timestamp_format = "unix_us"
          fielddrop = ["time"]
          name_override = "nuodb_thread"
          [inputs.execd.tags]
            db_tag = "nuodb_internal"
    
    


  
      
