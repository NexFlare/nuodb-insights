grafana:
  enabled: true
  # For complete list of configuration options for  
  # grafana see the documentation @ https://github.com/helm/charts/tree/master/stable/grafana.
  # sidecar setup here is for custom dashboards and datasource for nuocd pushing metrics
  # to influx
  sidecar:
    dashboards:
      enabled: true
      label: 'grafana_dashboard'
      searchNamespace: null
      folder: "/var/lib/grafana/dashboards"
      provider:
        name:           "nuodb"
        allowUiUpdates: true
    datasources:
      enabled: true
      label: 'grafana_datasource'
      searchNamespace: null

influxdb:
  enabled: true
  # For complete list of configuration options for  
  # influxdb see the documentation @ https://github.com/influxdata/helm-charts/tree/master/charts/influxdb
  # the initScript here is to initialize a database for metrics from nuocd.
  initScripts:
    enabled: true
    scripts:
      init-nuodb.sh: |+
        /usr/bin/influx -execute 'CREATE DATABASE nuodb WITH DURATION 365d REPLICATION 1 SHARD DURATION 1d NAME nuodbrp'        
        /usr/bin/influx -execute 'CREATE DATABASE nuolog WITH DURATION 365d REPLICATION 1 SHARD DURATION 1d NAME nuologrp'        
        /usr/bin/influx -execute 'CREATE DATABASE nuodb_internal WITH DURATION 365d REPLICATION 1 SHARD DURATION 1d NAME nuodbrp2'

# Configure the legacy NuoDB collector agent.
nuoca:
  enabled: false
  nuoadmin:
    enabled: false
    host:    nuodb
    port:    8888
    tls:
      enabled: true
  influxdb: {}
    #host: influxdb
    #port: 8086
    #dbname: nuodb
    
config:
  grafana:
    # enabled: false - to not load dashboards nor datasources but do start grafana (grafana.enabled: true)
    #                - true only loads dashboards if grafana.enabled: true or grafana.overrideNamespace is set.
    enabled: true
    datasources:
      nuodb:
        database: nuodb
        timeInterval: 10s
        isDefault: true
      nuodb_ext:
        database: nuodb_internal
        timeInterval: 30s
      nuolog:
        database: nuolog
        timeInterval: 30s
      addons:
        database: telegraf
        timeInterval: 10s

  # Configure the NuoDB collector daemon.  A sidecar that collects metrics from the engine process and
  # forwards to configurable output.  Addition input plugins and processors can be added also.
  nuocd:
    # enabled: false - will not setup nuocd configuration  set to false when starting grafana and insights
    #                  only - say in a different namespace.
    enabled: true
    
    # label generated plugins with given label to be found by pods deployed by database or admin helm charts
    # these labels should match the admin.insights and database.insights used in deploying the charts.
    labels:
      admin:    "insights-ap-plugin"
      database: "insights-db-plugin"

    # these are default plugins they can be disabled individually in user values file via:
    #  plugins:
    #    admin: {}
    #    all: {}
    #    database: 
    #      metrics: ~
    #      msgtrace: ~
    #      syntrace: ~
    #      threads: ~
    # influx output plugin is generated automatically iff
    #    influxdb.enabled: true or influxdb.host: <hostname>
    # other plugins can be enabled if users value files include plugin:
    # e.g.:
    # plugins:
    #   stdout: 
    #     [[outputs.file]]
    #       files = ["stdout"]
    #       data_format = "json"
    plugins:
      admin:
        logs: |-
          [[inputs.tail]]
            files = ["/var/log/nuodb/nuoadmin*.log"]
            from_beginning = true
            name_override= "logfile"
            data_format = "grok"
            grok_patterns= [ "%{CUSTOM_LOGLINE}" ]
            grok_custom_patterns = '''
            CUSTOM_LOGLINE %{TIMESTAMP_ISO8601:timestamp:ts-"2006-01-02T15:04:05.000-0700"}%{SPACE}(?:%{LOGLEVEL:loglevel:tag}%{SPACE}(?:%{NOTSPACE:logger:tag}%{SPACE})?)?%{GREEDYDATA:message}
            '''
            [inputs.tail.tags]
               db_tag = "nuolog"
      all: {}
      database:
        metrics: |-
          [[inputs.execd]]
            command = [ "python", "/opt/nuocd/nuodb_adminquery.py", "-i", "0", "metrics" ]
            signal = "none"
            restart_delay = "10s"
            data_format = "influx"
            [inputs.execd.tags]
              db_tag = "nuodb"
        msgtrace: |-
          [[inputs.execd]]
            command = [ "python", "/opt/nuocd/nuodb_adminquery.py", "-i", "30", "msgtrace" ]
            signal = "none"
            restart_delay = "10s"
            data_format = "csv"
            csv_column_names = [ "time", "id",      "nodeId", "listenerId", "startId", "host",   "pid",    "dbname", "timedelta", "totalSumStalls", "msg_trace_metric", "numStalls","totalTimeStalls","maxStallTime" ]
            csv_column_types = [ "int" , "string" , "string", "string",     "string",  "string", "string", "string", "int",       "int",            "string",           "int",      "int",            "int" ]
            csv_comment = "#"
            csv_tag_columns = [ "id", "startId", "nodeId", "listenerId", "host", "dbname", "msg_trace_metric"]
            csv_timestamp_column = "time"
            csv_timestamp_format = "unix"
            fielddrop = ["time", "pid", "path"]
            name_override = "nuodb_msgtrace"
            [inputs.execd.tags]
              db_tag = "nuodb_internal"
        synctrace: |-
          [[inputs.execd]]
            command = [ "python", "/opt/nuocd/nuodb_adminquery.py", "-i", "30", "synctrace" ]
            signal = "none"
            restart_delay = "10s"
            data_format = "csv"
            csv_column_names = [ "time", "id",      "startId", "host",  "pid",    "dbname", "timedelta","totalSumStalls","sync_trace_metric",    "numLocks", "numUnlocks", "numStalls","totalTimeStalls", "maxStallTime" ]
            csv_column_types = [ "int" , "string" , "string", "string", "string", "string", "int",      "int",           "string",  "int",      "int",        "int",      "int", "int" ]
            csv_comment = "#"
            csv_tag_columns = [ "startId", "id", "host", "dbname", "sync_trace_metric"]
            csv_timestamp_column = "time"
            csv_timestamp_format = "unix"
            fielddrop = ["time", "pid"]
            name_override = "nuodb_synctrace"
            [inputs.execd.tags]
              db_tag = "nuodb_internal"
        threads: |-
          [[inputs.execd]]
            command = [ "python", "/opt/nuocd/nuodb_threads.py" ]
            signal = "none"
            restart_delay = "10s"
            data_format = "csv"
            csv_column_names = [ "host", "pid", "threadid", "state", "exe", "lcpu", "utime", "stime", "ttime", "minf", "maxf", "time" ]
            csv_column_types = [ "string", "string", "string", "string", "string", "int", "float", "float", "float", "int", "int", "int" ]
            csv_comment = "#"
            csv_tag_columns = [ "host", "state", "exe" ]
            csv_timestamp_column = "time"
            csv_timestamp_format = "unix_us"
            fielddrop = ["time"]
            name_override = "nuodb_thread"
            [inputs.execd.tags]
              db_tag = "nuodb_internal"
    


  
      
